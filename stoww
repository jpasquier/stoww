#!/bin/sh

# stoww - A wrapper for GNU Stow
# This script handles pre/post-installation and removal scripts,
# manages a .stowed flag file, and ensures certain files are not stowed.

# Function to display help message
show_help() {
    cat << EOF
Usage: stoww [OPTIONS] PACKAGE...

A wrapper for GNU Stow with additional features.

Options:
  -S, --stow         Stow the package(s)
  -D, --delete       Unstow the package(s)
  -R, --restow       Restow the package(s)
  -h, --help         Display this help and exit

All other options are passed directly to GNU Stow.
EOF
}

# Initialize variables
OPERATION="stow"  # Default operation
STOW_ARGS=""
PACKAGES=""

# Parse command-line arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        -D|--delete)
            OPERATION="unstow"
            STOW_ARGS="$STOW_ARGS $1"
            ;;
        -S|--stow)
            OPERATION="stow"
            STOW_ARGS="$STOW_ARGS $1"
            ;;
        -R|--restow)
            OPERATION="restow"
            STOW_ARGS="$STOW_ARGS $1"
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            # Pass other options to stow
            STOW_ARGS="$STOW_ARGS $1"
            ;;
        *)
            # Package name
            PACKAGES="$PACKAGES $1"
            ;;
    esac
    shift
done

# Check if packages are specified
if [ -z "$PACKAGES" ]; then
    echo "Error: No packages specified."
    show_help
    exit 1
fi

# Set ignore patterns to prevent certain files from being stowed
IGNORE_FLAGS="--ignore=\.stowed --ignore=.*\.stow-.* --ignore=stow-.*"

# Function to run scripts if they exist and are executable
run_script() {
    SCRIPT_TYPE="$1"
    PACKAGE_DIR="$2"

    HIDDEN_SCRIPT="$PACKAGE_DIR/.stow-$SCRIPT_TYPE"
    NON_HIDDEN_SCRIPT="$PACKAGE_DIR/stow-$SCRIPT_TYPE"

    if [ -x "$HIDDEN_SCRIPT" ] && [ -x "$NON_HIDDEN_SCRIPT" ]; then
        echo "Error: Both $HIDDEN_SCRIPT and $NON_HIDDEN_SCRIPT exist. Please remove one."
        exit 1
    elif [ -x "$HIDDEN_SCRIPT" ]; then
        "$HIDDEN_SCRIPT"
    elif [ -x "$NON_HIDDEN_SCRIPT" ]; then
        "$NON_HIDDEN_SCRIPT"
    fi
}

# Perform the operation for each package
for PACKAGE in $PACKAGES; do
    PACKAGE_DIR="$PACKAGE"

    case "$OPERATION" in
        stow)
            run_script "preinst" "$PACKAGE_DIR"
            touch "$PACKAGE_DIR/.stowed"
            stow $STOW_ARGS $IGNORE_FLAGS "$PACKAGE_DIR"
            run_script "postinst" "$PACKAGE_DIR"
            ;;
        unstow)
            run_script "prerm" "$PACKAGE_DIR"
            rm -f "$PACKAGE_DIR/.stowed"
            stow $STOW_ARGS $IGNORE_FLAGS -D "$PACKAGE_DIR"
            run_script "postrm" "$PACKAGE_DIR"
            ;;
        restow)
            run_script "prerm" "$PACKAGE_DIR"
            rm -f "$PACKAGE_DIR/.stowed"
            stow $STOW_ARGS $IGNORE_FLAGS -R "$PACKAGE_DIR"
            run_script "postinst" "$PACKAGE_DIR"
            touch "$PACKAGE_DIR/.stowed"
            ;;
        *)
            echo "Error: Unknown operation."
            show_help
            exit 1
            ;;
    esac
done
